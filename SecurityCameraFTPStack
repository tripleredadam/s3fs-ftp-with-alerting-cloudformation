AWSTemplateFormatVersion: 2010-09-09

Parameters:

  AvailabilityZones:
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    Default: eu-west-1a
    Description: Subnet Availability Zone
    ConstraintDescription: must be a valid AZ in launch region.

  InstanceType:
    Description: FTP Server EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.

  TagName:
    Description: A string to Prefix to all Tags
    Type: String
    Default: FTPServerStack

  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: String
    Default: FTPEC2KeyPair
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  S3BucketName:
    Description: Name of S3 Bucket.
    Type: String
    Default: robertson-road-camera-video-bucket
    ConstraintDescription: must be a unique bucket name globally in the whole world.

  FTPUserName:
    Description: FTP Username
    Type: String
    Default: defaultftpuser

  FTPUserPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 64
    Description: FTP User Password
    ConstraintDescription: Minimum 8 characters (maximum 64)

  AlertEmailAddress:
    Type: String
    Description: Email address to send alerts to
    Default: adam+no-security-camera-uploads@tripleredcherry.com
    AllowedPattern: '[^@]+@[^@]+\.[^@]+'


Resources:

  SESIdentity:
    Type: AWS::SES::EmailIdentity
    Properties: 
      EmailIdentity: !Sub '${AlertEmailAddress}'
    DeletionPolicy: Delete

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Internet Gateway'
    DeletionPolicy: Delete

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FTPVPC
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Public Route Table'
    DeletionPolicy: Delete

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
    DeletionPolicy: Delete    

  FTPVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${TagName} VPC'
    DeletionPolicy: Delete

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref FTPVPC
      InternetGatewayId: !Ref InternetGateway
    DeletionPolicy: Delete    

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet    
    DeletionPolicy: Delete

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Security Group'
      VpcId: !Ref FTPVPC
      GroupDescription: Security Group for FTP VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 21
          ToPort: 21
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1024
          ToPort: 1048
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 50000
          CidrIp: 0.0.0.0/0
    DeletionPolicy: Delete

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [" ", [ !Ref TagName, "Public Subnet", !Select [0, !Ref AvailabilityZones]]]
      VpcId: !Ref FTPVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - '0'
        - !Ref AvailabilityZones
    DeletionPolicy: Delete

  EC2KeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub '${KeyName}'
    DeletionPolicy: Delete

  FTPServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${TagName} FTP Server Instance'
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref S3FSEC2InstanceProfile
      ImageId: ami-0606971ce93115519
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash 
          userdel -r awsftpuser 
          crontab -r 
          rm -rf /etc/vsftpd.userlist

          useradd -p $(echo "${FTPUserPassword}" | openssl passwd -1 -stdin) \
          ${FTPUserName} 

          sed -i "s/pasv_address.*/pasv_address\=$(curl 'http://169.254.169.254/latest/meta-data/public-ipv4')/" /etc/vsftpd/vsftpd.conf
          echo "${FTPUserName}" | sudo tee -a /etc/vsftpd.userlist
          service vsftpd restart

          mkdir /home/${FTPUserName}/ftp 
          chown nfsnobody:nfsnobody /home/${FTPUserName}/ftp 
          chmod a-w /home/${FTPUserName}/ftp 
          mkdir /home/${FTPUserName}/ftp/files 
          chown ${FTPUserName}:${FTPUserName} /home/${FTPUserName}/ftp/files

          /usr/local/bin/s3fs ${S3BucketName} -o \
          use_cache=/tmp,iam_role="S3FSRole-${AWS::Region}-${TagName}",allow_other \
          /home/${FTPUserName}/ftp/files -o \
          url="https://s3-${AWS::Region}.amazonaws.com" -o nonempty

          { cat; echo "@reboot /usr/local/bin/s3fs ${S3BucketName} -o \
          use_cache=/tmp,iam_role=\"S3FSRole-${AWS::Region}-${TagName}\",allow_other \
          /home/${FTPUserName}/ftp/files -o \
          url=\"https://s3-${AWS::Region}.amazonaws.com\" -o nonempty"; } | \
          crontab -
    DependsOn:
      - PublicRoute
      - S3BucketVideos
      - S3FSRole
      - EC2KeyPair
    DeletionPolicy: Delete

  S3FSEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref S3FSRole
    DeletionPolicy: Delete    

  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref FTPServerInstance
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Elastic IP'
    DeletionPolicy: Delete

  S3FSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Join 
        - '-'
        - - S3FSRole
          - !Ref 'AWS::Region'
          - !Ref TagName
      Tags:
        - Key: Name
          Value: !Sub '${TagName} S3FSRole'
    DeletionPolicy: Delete

  S3FSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join 
        - '-'
        - - S3FSPolicy
          - !Ref 'AWS::Region'
          - !Ref TagName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !GetAtt S3BucketVideos.Arn
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource:
              - !Join 
                - ''
                - - !GetAtt S3BucketVideos.Arn
                  - /*
      Roles:
        - !Ref S3FSRole
    DeletionPolicy: Delete
    DependsOn:
      - S3BucketVideos

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: file_key
          AttributeType: S
      KeySchema:
        - AttributeName: file_key
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: !Sub '${TagName} DynamoDB FTP File Table'
    DeletionPolicy: Delete

  UpdateDynamoDBWithEntry:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Adds record to DynamoDB table when an object is submitted to the bucket (TTL 3 Days)'
      Role: !GetAtt UpdateDynamoDBWithEntryRole.Arn
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import datetime
          import time
          from decimal import Decimal
          from boto3.dynamodb.conditions import Key, Attr

          dynamo_db = boto3.resource('dynamodb')
          table = dynamo_db.Table('${DynamoDBTable}')  # DynamoDB table name

          def lambda_handler(event, context):

              for i in event["Records"]:
                  action = i["eventName"]
                  eventtime = i["eventTime"]
                  bucket_name = i["s3"]["bucket"]["name"]
                  objects = i["s3"]["object"]["key"]
                  etag = i["s3"]["object"]["eTag"]

              try:
                  table.put_item(
                      Item ={
                          "etag": str(etag),
                          "file_key": objects,
                          "lastmodified": eventtime,
                          "ttl":Decimal(time.time()+(3*86400*1000)) # ttl 3 days
                      })
                  print('Data added to Dynamo DB')
              except Exception as err:
                  print (">>>>>>>>"+str(err))
              return {
                  'statusCode': 200,
                  'body': json.dumps('Ho gaya!')
              }
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Update DynamoDB Lambda'
    DeletionPolicy: Delete
    DependsOn:
      - UpdateDynamoDBWithEntryRole
      - DynamoDBTable

  UpdateDynamoDBWithEntryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${TagName} UpdateDynamoDBWithEntryRole'
    DeletionPolicy: Delete

  UpdateDynamoDBWithEntryLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UpdateDynamoDBWithEntry}"      
      RetentionInDays: 7    

  AlertNoFileFound:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Checks DynamoDB table and sends email alert if no new files added within last 60 minutes'
      Role: !GetAtt AlertNoFileFoundRole.Arn
      Runtime: python3.9
      Handler: index.lambda_handler
      Tags:
        - Key: Name
          Value: !Sub '${TagName} Alert on No File Found Lambda'
      Code:
        ZipFile: !Sub |

          import json
          import boto3
          import datetime
          from boto3.dynamodb.conditions import Key, Attr

          client = boto3.client('ses')
          dynamo_db = boto3.resource('dynamodb')
          table = dynamo_db.Table('${DynamoDBTable}')  # DynamoDB table name

          def lambda_handler(event, context):
              try:
                  now = datetime.datetime.now()
                  one_hour_ago = now - datetime.timedelta(hours=1)
                  now = now.strftime('%FT%T')
                  one_hour_ago = one_hour_ago.strftime('%FT%T')

                  response = table.scan(
                      FilterExpression = Key('lastmodified').between(one_hour_ago,now)
                      )
                  print(response)
                  no_of_files = response['Count']
                  files = response['Items']
                  print(no_of_files)
                  if no_of_files == 0:
                      print('No file found')
                      subject = 'NO SECURITY CAMERA UPLOADS FOR 1 HOUR'
                      body = '''
                  <br>
                  This email is to notify you that no file has been ingested into ${S3BucketName} for 1 hour. Go and fix it.
                  '''
                      message = {'Subject': {'Data': subject}, 'Body': {'Html': {'Data': body}}}

                      response_ses = client.send_email(Source = '${AlertEmailAddress}', Destination = {'ToAddresses': ['${AlertEmailAddress}']}, Message = message)
                  else:
                      print('file found' + str(files))
                  
              except Exception as err:
                  print('Error fetching data'+str(err))

              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('How was that!!')
              }
    DeletionPolicy: Delete
    DependsOn:
      - AlertNoFileFoundRole
      - DynamoDBTable

  AlertNoFileFoundRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${TagName} AlertNoFileFoundRole'
    DeletionPolicy: Delete

  AlertNoFileFoundLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AlertNoFileFound}"
      RetentionInDays: 7    

  CheckUploadRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(1 hour)
      Targets:
        - Arn: !GetAtt AlertNoFileFound.Arn
          Id: AlertNoFileFoundLambda      
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9a829284-0058-4f26-bb14-13ac0a1c7bf8
    DeletionPolicy: Delete

  CheckUploadRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AlertNoFileFound
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${CheckUploadRule}'
    DeletionPolicy: Delete    

  S3BucketVideos:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt UpdateDynamoDBWithEntry.Arn
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 21
      Tags:
        - Key: Name
          Value: !Sub '${TagName} S3 Video Bucket'
    DeletionPolicy: Delete
    DependsOn:
      - UpdateDynamoDBWithEntry
      - S3BucketVideosPermission

  S3BucketVideosPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref UpdateDynamoDBWithEntry
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'
    DeletionPolicy: Delete


